
agent(player).
agent(companionI).
agent(companionF).
%agent(companionE).
%agent(companionW).
agent(gob).

ally(player).
ally(companionI).
ally(companionF).
%ally(companionE).
%ally(companionW).
enemy(gob).
enemy(mimic).
enemy(electricityElemental).
enemy(teslaTower).

at(player, room).
at(companionI, inn).
at(companionF, inn).
%at(companionE, hut).
%at(companionW, inn).
at(mimic, room).
at(gob, hut).
at(electricityElemental, mountain).
at(teslaTower, lake).

location(room).
location(inn).
location(hut).
location(mountain).
location(lake).
location(sea).
location(volcano).

locationCanApplyTag(lake, wet).
%locationCanApplyTag(sea, wet).

immune(electricityElemental, electrocute).

static(teslaTower).

hasSkill(companionI, iceBlastSkill).
hasSkill(companionF, fireballSkill).
%hasSkill(companionE, lightningSkill).
%hasSkill(companionW, waterSkill).

hasSkill(teslaTower, lightningSkill).
%hasSkill(electricityElemental, lightningSkill).

skillHasTag(fireballSkill, slow).

skillAppliesTag(iceBlastSkill, stun).
skillAppliesTag(fireballSkill, fire).
skillAppliesTag(lightningSkill, electrocute).
skillAppliesTag(waterSkill, wet).
skillAppliesTag(waterSkill, clean).

canGetSkillAtLocation(sea, waterSkill).
%canGetSkillAtLocation(lake, waterSkill).
canGetSkillAtLocation(mountain, iceBlastSkill).
canGetSkillAtLocation(volcano, fireballSkill).




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Attacker damages target
planToDamage(?t) :- if(enemy(?t)),
    do(stunAndSlowSkill(?t)).

planToDamage(?t) :- if(enemy(?t)),
    do(wetAndElectrocute(?t)).

% Simultaneous
stunAndSlowSkill(?t) :- 
    if(
        enemy(?t), 
        not(immune(?t, stun)), 
        skillHasTag(?slowSkill, slow), 
        not(immune(?t, ?slowSkill)), 
        skillAppliesTag(?stunSkill, stun), 
        ally(?a1), 
        ally(?a2), 
        \==(?a1, ?a2)
    ), 
    do(
        prepareToUseSkill(?a1, ?stunSkill, ?t), 
        prepareToUseSkill(?a2, ?slowSkill, ?t), 
        opSynchronize(?a1, ?a2),
        useSkillOnTarget(?a1,?stunSkill,?t),
        useSkillOnTarget(?a2,?slowSkill,?t)
    ).


opSynchronize(?a1, ?a2) :-
    del(), add().

stunAndSlowSkillDebug(?t, ?a1, ?a2) :- 
    if(
        enemy(?t), 
        not(immune(?t, stun)), 
        skillHasTag(?slowSkill, slow), 
        not(immune(?t, ?slowSkill)), 
        skillAppliesTag(?stunSkill, stun)
    ), 
    do(
        prepareToUseSkill(?a1, ?stunSkill, ?t), 
        prepareToUseSkill(?a2, ?slowSkill, ?t), 
        useSkillOnTarget(?a1,?stunSkill,?t),
        useSkillOnTarget(?a2,?slowSkill,?t)
    ).

% Sequential
wetAndElectrocute(?t) :- 
    if(enemy(?t)), 
    do(applyTag(wet, ?t), applyTag(electrocute, ?t)).

applyTag(?tag, ?t) :- if(hasTag(?t, ?tag)), 
    do(opTagAlreadyOnTarget(?tag, ?t)).

opTagAlreadyOnTarget(?tag, ?t) :-
    del(), add().

applyTag(?tag, ?t) :- if(not(hasTag(?t, ?tag))), 
    do(applyTagNotPresent(?tag, ?t)).

% Ally apply Skill
applyTagNotPresent(?tag, ?t) :- if(skillAppliesTag(?s,?tag)),
    do(prepareToUseSkill(?a, ?s, ?t), useSkillOnTarget(?a, ?s, ?t)).

% Location applies tag
applyTagNotPresent(?tag, ?t) :- if(locationCanApplyTag(?l, ?tag)),
    do(bringMobToLocation(?t, ?l), useLocationToApplyTag(?l, ?tag, ?t)).

% Other mob apply skill
applyTagNotPresent(?tag, ?t) :- if(hasSkill(?m, ?s), \==(?m, ?t), not(ally(?m)), skillAppliesTag(?s,?tag)),
    do(bringMobsTogether(?t, ?m), useMobSkillToApplyTag(?m, ?s, ?t)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Cast skill



prepareToUseSkill(?a,?s,?t) :- if(hasSkill(?a, ?s)),
    do(goToSameLocation(?a,?t)).

prepareToUseSkill(?a,?s,?t) :- if(ally(?a), not(hasSkill(?a, ?s)), canGetSkillAtLocation(?l, ?s)),
    do(goToLocation(?a, ?l), getSkillFromLocation(?a, ?l, ?s), goToSameLocation(?a,?t)).




useSkillOnTargetSafe(?a,?s,?t) :- if(
        not(hasTag(?t, ?s)),
        hasSkill(?a,?s), 
        at(?a,?loc), 
        at(?t,?loc)
    ), 
    do(
        applySpellToTarget(?a, ?s, ?t)
    ).

useSkillOnTarget(?a,?s,?t) :- if(
    ), 
    do(
        applySkillTags_L_ApplyTag(?s, ?t)
    ).


applySkillTags_L_ApplyTag(?s, ?t) :- anyOf, if(skillAppliesTag(?s, ?tag)),
    do(opApplyTag(?tag, ?t)).

applySkillTags_L_ApplyTag(?s, ?t) :- if(not(skillAppliesTag(?s, ?tag))),
    do().

opApplyTag(?tag, ?t) :- 
    del(), add(hasTag(?t, ?tag)).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Use location to get skill

%Unsafe
getSkillFromLocation(?a, ?l, ?s) :- if(hasSkill(?a, ?oldSkill)), 
    do(opSwapSkill(?a, ?oldSkill, ?s)).

getSkillFromLocation(?a, ?l, ?s) :- if(not(hasSkill(?a, ?oldSkill))), 
    do(opGetSkill(?a, ?s)).

opSwapSkill(?a, ?oldSkill, ?s) :- 
    del(hasSkill(?a, ?oldSkill)), add(hasSkill(?a, ?s)).

opGetSkill(?a, ?s) :- 
    del(), add(hasSkill(?a, ?s)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Use location to apply effect

useLocationToApplyTag(?l, ?tag, ?t) :- if(),
    do().
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Use non-ally agent to apply effect
% Assume that we bring one mob to the other, we don't bring them both to a 3rd location

bringMobsTogether(?m1, ?m2) :- if(at(?m1, ?location), at(?m2, ?location)), 
    do().

bringMobsTogether(?m1, ?m2) :- if(not(static(?m1)), at(?m2, ?m2Location)), 
    do(bringMobToLocation(?m1, ?m2Location)).

bringMobsTogether(?m1, ?m2) :- if(not(static(?m2)), at(?m1, ?m1Location)), 
    do(bringMobToLocation(?m2, ?m1Location)).

useMobSkillToApplyTag(?m, ?tag, ?t) :- if(),
    do().
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Move related
goToSameLocation(?a,?t) :- if(at(?a, ?location), at(?t, ?location)),
    do(opStayInLocation(?a)).
goToSameLocation(?a,?t) :- if(not(static(?a)), at(?a, ?aOldLocation), at(?t, ?tOldLocation), \==(?aOldLocation, ?tOldLocation)),
    do(goToLocation(?a, ?tOldLocation)).


goToLocation(?a, ?l) :- if(at(?a, ?l)), 
    do(opStayInLocation(?a)).
goToLocation(?a, ?l) :- if(at(?a, ?aLocation), \==(?l, ?aLocation)), 
    do(opMoveTo(?a, ?aLocation, ?l)).

opMoveTo(?a, ?oldLocation, ?newLocation) :- 
    del(at(?a, ?oldLocation)), add(at(?a, ?newLocation)).
opAggroMoveTo(?a, ?oldLocation, ?newLocation) :- 
    del(at(?a, ?oldLocation)), add(at(?a, ?newLocation)).
opStayInLocation(?a) :- 
    del(), add().


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Aggro related
bringMobToLocation(?t, ?l) :- if(at(?t, ?l)), 
    do().
bringMobToLocation(?t, ?l) :- if(at(?t, ?tOldLocation), \==(?l, ?tOldLocation), not(static(?t)), ally(?a), at(?a, ?aOldLocation)), 
    do(goToLocation(?a, ?tOldLocation), aggroTarget(?t, ?a), goToLocation(?a, ?l), opAggroMoveTo(?t, ?tOldLocation, ?l)).

bringMobToLocation(?a, ?t, ?l)  :- if(), do().

aggroTarget(?t, ?a) :- if(aggro(?t, ?oldTarget), \==(?t, ?a), \==(?oldTarget, ?a)), 
    do(opRemoveAggro(?t, ?oldTarget), opAggro(?t, ?a)).
aggroTarget(?t, ?a) :- if(not(aggro(?t, ?oldTarget)), \==(?t, ?a)), 
    do(opAggro(?t, ?a)).
aggroTarget(?t, ?a) :- if(aggro(?t, ?a)), 
    do(opTargetAlreadyAggroed()).

opRemoveAggro(?t, ?a) :-
    del(aggro(?t, ?a)), add().
opAggro(?t, ?a) :-
    del(), add(aggro(?t, ?a)).
opTargetAlreadyAggroed() :- 
    del(), add().



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%



    


